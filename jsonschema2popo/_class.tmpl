#!/usr/bin/env/python

import enum

{% for model in models %}
class {{model.name}}:

{% for prop in model.properties if prop._enum %}
    _{{prop._name}}_enum = enum.Enum('_{{prop._name}}_enum', '{{prop._enum|join(' ')}}', module=__name__)
{% endfor %}
    _types_map = {
{% for prop in model.properties %}
        '{{prop._name}}': {'type': {{prop._type.type.__name__ or prop._type.type or None}}, 'subtype': {{prop._type.subtype.__name__ or prop._type.subtype or None}}},
{% endfor %}
    }
    _formats_map = {
{% for prop in model.properties if prop._format %}
        '{{prop._name}}': '{{prop._format}}',
{% endfor %}
    }

    def __init__(self
{% for prop in model.properties %}
            , {{prop._name}}={{prop._default}}
{% endfor %}
            ):
{% for prop in model.properties %}
        self.__{{prop._name}} = {{prop._name}}
{% endfor %}
    
{% for prop in model.properties %}
    def _get_{{prop._name}}(self):
        return self.__{{prop._name}}
    def _set_{{prop._name}}(self, value):
{% if prop._type and prop._type.type %}
        if not isinstance(value, {{prop._type.type.__name__ or prop._type.type}}):
            raise TypeError("{{prop._name}} must be {{prop._type.type.__name__ or prop._type.type}}")
{% endif %}
{% if prop._type and prop._type.type.__name__ == 'list' and prop._type.subtype %}
        if not all(isinstance(i, {{prop._type.subtype.__name__ or prop._type.subtype}}) for i in value):
            raise TypeError("{{prop._name}} list values must be {{prop._type.subtype.__name__ or prop._type.subtype}}")
{% endif %}
{% if prop._enum %}
        if value in self._{{prop._name}}_enum.__members__:
            self.__{{prop._name}} = value
        else:
            raise ValueError("Value {} not in _{{prop._name}}_enum list".format(value))
{% else %}
        self.__{{prop._name}} = value
{% endif %}
    {{prop._name}} = property(_get_{{prop._name}}, _set_{{prop._name}})
    
{% endfor %}
    def as_dict(self):
        d = dict()
{% for prop in model.properties %}
        if self.__{{prop._name}} is not None:
{% if prop._type.type.__name__ == 'list' %}
            d['{{prop._name}}'] = [p.as_dict() if hasattr(p, 'as_dict') else p for p in self.__{{prop._name}}]
{% else %}
            d['{{prop._name}}'] = self.__{{prop._name}}.as_dict() if hasattr(self.__{{prop._name}}, 'as_dict') else self.__{{prop._name}}
{% endif %}
{% endfor %}
        return d

{% endfor %}
